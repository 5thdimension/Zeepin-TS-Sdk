{"remainingRequest":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js??ref--13-2!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\network\\rest\\restClient.ts","dependencies":[{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\network\\rest\\restClient.ts","mtime":1601302458206},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _Map from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/map\";\nimport _classCallCheck from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { TEST_ZEEPIN_URL } from \"../../common/consts\";\nimport { concatParams } from \"../../common/functionsUtils\";\nimport UrlConsts from \"./urlConsts\";\nimport { ERROR_CODE } from \"../../common/error\";\n\nvar RestClient =\n/*#__PURE__*/\nfunction () {\n  function RestClient(url) {\n    _classCallCheck(this, RestClient);\n\n    this.url = url || TEST_ZEEPIN_URL.REST_URL;\n    this.version = 'v1.0.0';\n    this.action = 'sendrawtransaction';\n  }\n\n  _createClass(RestClient, [{\n    key: \"sendRawTransaction\",\n    value: function sendRawTransaction(hexData) {\n      var preExec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var param = new _Map();\n\n      if (preExec) {\n        param.set('preExec', '1');\n      }\n\n      var url = this.url + UrlConsts.Url_send_transaction;\n      url += concatParams(param);\n      var body = {\n        Action: this.action,\n        Version: this.version,\n        Data: hexData\n      };\n      return axios.post(url, body).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getRawTransaction\",\n    value: function getRawTransaction(txHash) {\n      var param = new _Map();\n      param.set('raw', '1');\n      var url = this.url + UrlConsts.Url_get_transaction + txHash;\n      url += concatParams(param);\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getRawTransactionJson\",\n    value: function getRawTransactionJson(txHash) {\n      var param = new _Map();\n      param.set('raw', '0');\n      var url = this.url + UrlConsts.Url_get_transaction + txHash;\n      url += concatParams(param);\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getNodeCount\",\n    value: function getNodeCount() {\n      var url = this.url + UrlConsts.Url_get_node_count;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getBlockHeight\",\n    value: function getBlockHeight() {\n      var url = this.url + UrlConsts.Url_get_block_height;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(value) {\n      var params = new _Map();\n      params.set('raw', '1');\n      var url = '';\n\n      if (typeof value === 'number') {\n        url = this.url + UrlConsts.Url_get_block_by_height + value;\n      } else if (typeof value === 'string') {\n        url = this.url + UrlConsts.Url_get_block_by_hash + value;\n      }\n\n      url += concatParams(params);\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * Get contract info by code hash.The result is hex encoded string.\r\n     * @param codeHash Code hash of contract.The value is reversed contract address.\r\n     */\n\n  }, {\n    key: \"getContract\",\n    value: function getContract(codeHash) {\n      var params = new _Map();\n      params.set('raw', '1');\n      var url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n      url += concatParams(params); // console.log('url: '+url);\n\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * Get contract info by code hash. The result is json.\r\n     * @param codeHash Code hash of contract.\r\n     */\n\n  }, {\n    key: \"getContractJson\",\n    value: function getContractJson(codeHash) {\n      var params = new _Map();\n      params.set('raw', '0');\n      var url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n      url += concatParams(params);\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getSmartCodeEvent\",\n    value: function getSmartCodeEvent(value) {\n      var url = '';\n\n      if (typeof value === 'string') {\n        url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\n      } else if (typeof value === 'number') {\n        url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\n      }\n\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * Get the block height by reversed transaction hash.\r\n     * @param hash Reversed transaction hash.\r\n     */\n\n  }, {\n    key: \"getBlockHeightByTxHash\",\n    value: function getBlockHeightByTxHash(hash) {\n      var url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * Get the stored value in smart contract by the code hash and key.\r\n     * @param codeHash Code hash of the smart contract\r\n     * @param key Key of the stored value\r\n     */\n\n  }, {\n    key: \"getStorage\",\n    value: function getStorage(codeHash, key) {\n      var url = this.url + UrlConsts.Url_get_storage + codeHash + '/' + key;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * Get the merkle proof by transaction hash\r\n     * @param hash Reversed transaction hash\r\n     */\n\n  }, {\n    key: \"getMerkleProof\",\n    value: function getMerkleProof(hash) {\n      var url = this.url + UrlConsts.Url_get_merkleproof + hash; // tslint:disable-next-line:no-console\n\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * Get balance of some address\r\n     * The result contains balance of ZPT and Gala\r\n     * @param address Address\r\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(address) {\n      var url = this.url + UrlConsts.Url_get_account_balance + address.toBase58();\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * Get block info by block's height or hash.\r\n     * @param value Block's height or hash\r\n     */\n\n  }, {\n    key: \"getBlockJson\",\n    value: function getBlockJson(value) {\n      var url = '';\n\n      if (typeof value === 'number') {\n        url = this.url + UrlConsts.Url_get_block_by_height + value;\n      } else if (typeof value === 'string') {\n        url = this.url + UrlConsts.Url_get_block_by_hash + value;\n      }\n\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\r\n     * Get allowance by address\r\n     * @param asset Asset type. Only ZPT or Gala.\r\n     * @param from Address of allowance sender.\r\n     * @param to Address of allowance receiver.\r\n     */\n\n  }, {\n    key: \"getAllowance\",\n    value: function getAllowance(asset, from, to) {\n      asset = asset.toLowerCase();\n\n      if (asset !== 'zpt' && asset !== 'gala') {\n        throw ERROR_CODE.INVALID_PARAMS;\n      }\n\n      var url = this.url + UrlConsts.Url_get_allowance + asset.toLowerCase() + '/' + from.toBase58() + '/' + to.toBase58();\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getUnboundGala\",\n    value: function getUnboundGala(address) {\n      var url = this.url + UrlConsts.Url_get_unbound_gala + address.toBase58();\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getBlockTxsByHeight\",\n    value: function getBlockTxsByHeight(height) {\n      var url = this.url + UrlConsts.Url_get_block_txs_by_height + height;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      var url = this.url + UrlConsts.Url_get_gasprice;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getMempoolTxCount\",\n    value: function getMempoolTxCount() {\n      var url = this.url + UrlConsts.Url_get_mempool_txcount;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getMempoolTxState\",\n    value: function getMempoolTxState(hash) {\n      var url = this.url + UrlConsts.Url_get_mempool_txstate + hash;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getVersion\",\n    value: function getVersion() {\n      var url = this.url + UrlConsts.Url_get_version;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }]);\n\n  return RestClient;\n}();\n\nexport { RestClient as default };",{"version":3,"sources":["C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\network\\rest\\restClient.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { TEST_ZEEPIN_URL } from \"../../common/consts\";\r\nimport { concatParams, hex2VarBytes, hexstr2str } from \"../../common/functionsUtils\";\r\nimport UrlConsts from \"./urlConsts\";\r\nimport { Address } from \"../../wallet/address\";\r\nimport { ERROR_CODE } from \"../../common/error\";\r\n\r\nexport default class RestClient {\r\n    url: string;\r\n    version: string;\r\n    action: string;\r\n\r\n    constructor(url?:string) {\r\n        this.url = url || TEST_ZEEPIN_URL.REST_URL;\r\n        this.version = 'v1.0.0';\r\n        this.action = 'sendrawtransaction';\r\n    }\r\n\r\n    sendRawTransaction(hexData: string, preExec: boolean = false): Promise<any> {\r\n        const param = new Map<string, string>();\r\n        if(preExec) {\r\n            param.set('preExec', '1');\r\n        }\r\n        let url = this.url + UrlConsts.Url_send_transaction;\r\n        url += concatParams(param);\r\n        const body = {\r\n            Action: this.action,\r\n            Version: this.version,\r\n            Data: hexData\r\n        };\r\n        return axios.post(url, body).then((res) => {\r\n                return res.data;\r\n        });\r\n    }\r\n\r\n    getRawTransaction(txHash: string): Promise<any> {\r\n        const param = new Map<string, string>();\r\n\r\n        param.set('raw', '1');\r\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\r\n        url += concatParams(param);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getRawTransactionJson(txHash: string): Promise<any> {\r\n        const param = new Map<string, string>();\r\n        param.set('raw', '0');\r\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\r\n        url += concatParams(param);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getNodeCount(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_node_count;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getBlockHeight(): Promise<any>{\r\n        const url = this.url + UrlConsts.Url_get_block_height;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getBlock(value: number | string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '1');\r\n\r\n        let url = '';\r\n        if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\r\n        } else if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\r\n        }\r\n        url += concatParams(params);\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash.The result is hex encoded string.\r\n     * @param codeHash Code hash of contract.The value is reversed contract address.\r\n     */\r\n    getContract(codeHash: string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '1');\r\n\r\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\r\n        url += concatParams(params);\r\n\r\n        // console.log('url: '+url);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash. The result is json.\r\n     * @param codeHash Code hash of contract.\r\n     */\r\n    getContractJson(codeHash: string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '0');\r\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\r\n        url += concatParams(params);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getSmartCodeEvent(value: string | number): Promise<any> {\r\n        let url = '';\r\n        if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\r\n        } else if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\r\n        }\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the block height by reversed transaction hash.\r\n     * @param hash Reversed transaction hash.\r\n     */\r\n    getBlockHeightByTxHash(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the stored value in smart contract by the code hash and key.\r\n     * @param codeHash Code hash of the smart contract\r\n     * @param key Key of the stored value\r\n     */\r\n    getStorage(codeHash: string, key: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_storage + codeHash + '/' + key;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the merkle proof by transaction hash\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    getMerkleProof(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_merkleproof + hash;\r\n\r\n        // tslint:disable-next-line:no-console\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get balance of some address\r\n     * The result contains balance of ZPT and Gala\r\n     * @param address Address\r\n     */\r\n    getBalance(address: Address): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_account_balance + address.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block info by block's height or hash.\r\n     * @param value Block's height or hash\r\n     */\r\n    getBlockJson(value: number | string): Promise<any> {\r\n        let url = '';\r\n        if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\r\n        } else if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\r\n        }\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get allowance by address\r\n     * @param asset Asset type. Only ZPT or Gala.\r\n     * @param from Address of allowance sender.\r\n     * @param to Address of allowance receiver.\r\n     */\r\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\r\n        asset = asset.toLowerCase();\r\n        if (asset !== 'zpt' && asset !== 'gala') {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const url = this.url + UrlConsts.Url_get_allowance +\r\n            asset.toLowerCase() + '/' + from.toBase58() + '/' + to.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getUnboundGala(address: Address): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_unbound_gala + address.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getBlockTxsByHeight(height: number): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_block_txs_by_height + height;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGasPrice(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_gasprice ;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxCount(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_mempool_txcount;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxState(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_mempool_txstate + hash;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getVersion(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_version;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""}]}