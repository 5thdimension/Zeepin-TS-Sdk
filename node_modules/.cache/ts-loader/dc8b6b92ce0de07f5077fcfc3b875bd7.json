{"remainingRequest":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js??ref--13-2!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\wallet\\wallet.ts","dependencies":[{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\wallet\\wallet.ts","mtime":1601302458230},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.map\";\nimport _JSON$stringify from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _getIterator from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport { DEFAULT_SCRYPT } from \"../common/consts\";\nimport { Account } from \"./account\";\nexport var Wallet =\n/*#__PURE__*/\nfunction () {\n  function Wallet() {\n    _classCallCheck(this, Wallet);\n\n    this.name = 'com.github.zeepin';\n    this.version = '1.0';\n    this.scrypt = {\n      dkLen: DEFAULT_SCRYPT.size,\n      n: DEFAULT_SCRYPT.cost,\n      p: DEFAULT_SCRYPT.parallel,\n      r: DEFAULT_SCRYPT.blockSize\n    };\n  }\n  /**\r\n   * create wallet\r\n   */\n\n\n  _createClass(Wallet, [{\n    key: \"addAccount\",\n    value: function addAccount(account) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(this.accounts), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var ac = _step.value;\n\n          if (ac.address.toBase58() === account.address.toBase58()) {\n            return;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.accounts.push(account);\n    }\n  }, {\n    key: \"setDefaultAccount\",\n    value: function setDefaultAccount(address) {\n      this.defaultAccountAddress = address;\n    }\n    /**\r\n     * keystore\r\n     */\n\n  }, {\n    key: \"toJson\",\n    value: function toJson() {\n      return _JSON$stringify(this.toJsonObj());\n    }\n  }, {\n    key: \"toJsonObj\",\n    value: function toJsonObj() {\n      var obj = {\n        accounts: this.accounts.map(function (a) {\n          return a.toJsonObj();\n        }),\n        defaultAccountAddress: this.defaultAccountAddress,\n        name: this.name,\n        scrypt: this.scrypt,\n        version: this.version\n      };\n      return obj;\n    }\n  }], [{\n    key: \"createWallet\",\n    value: function createWallet(password, name) {\n      var wallet = new Wallet();\n      wallet.accounts = [];\n      wallet.accounts.push(Account.createAccount(password, name));\n      wallet.defaultAccountAddress = wallet.accounts[0].address.toBase58();\n      return wallet;\n    }\n    /**\r\n     * import wallet\r\n     */\n\n  }, {\n    key: \"importWalletByPrivateKey\",\n    value: function importWalletByPrivateKey(password, privateKey, name) {\n      var wallet = new Wallet();\n      wallet.accounts = [];\n      wallet.accounts.push(Account.importAccountByPrivateKey(password, privateKey, name));\n      wallet.defaultAccountAddress = wallet.accounts[0].address.toBase58();\n      return wallet;\n    }\n  }, {\n    key: \"importWalletByKeystore\",\n    value: function importWalletByKeystore(password, keystore) {\n      var wallet = new Wallet(); // @ts-ignore\n\n      wallet.defaultAccountAddress = keystore.accounts[0].address;\n      wallet.accounts = [];\n      wallet.accounts.push(Account.importAccountByKeystore(password, keystore)); // @ts-ignore\n\n      wallet.scrypt.n = keystore.scrypt.n;\n      return wallet;\n    }\n  }, {\n    key: \"modifyPassword\",\n    value: function modifyPassword(oldPassword, newPassword, keystore) {\n      var wallet = new Wallet(); // @ts-ignore\n\n      wallet.defaultAccountAddress = keystore.accounts[0].address;\n      wallet.accounts = [];\n      wallet.accounts.push(Account.modifyPassword(oldPassword, newPassword, keystore));\n      return wallet;\n    }\n  }]);\n\n  return Wallet;\n}();",{"version":3,"sources":["C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\wallet\\wallet.ts"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_SCRYPT } from \"../common/consts\";\r\nimport { Account } from \"./account\";\r\n\r\nexport class Wallet {\r\n    name: string = 'com.github.zeepin';\r\n    version: string = '1.0';\r\n    scrypt = {\r\n        dkLen: DEFAULT_SCRYPT.size,\r\n        n: DEFAULT_SCRYPT.cost,\r\n        p: DEFAULT_SCRYPT.parallel,\r\n        r: DEFAULT_SCRYPT.blockSize\r\n    };\r\n    defaultAccountAddress: string;\r\n    accounts: Account[];\r\n\r\n\r\n    /**\r\n     * create wallet\r\n     */\r\n    static createWallet(password: string, name?: string): Wallet {\r\n        const wallet = new Wallet();\r\n        wallet.accounts = [];\r\n        wallet.accounts.push(Account.createAccount(password, name));\r\n        wallet.defaultAccountAddress = wallet.accounts[0].address.toBase58();\r\n        return wallet;\r\n    }\r\n\r\n    /**\r\n     * import wallet\r\n     */\r\n    static importWalletByPrivateKey(password: string, privateKey: string, name?: string): Wallet {\r\n        const wallet = new Wallet();\r\n        wallet.accounts = [];\r\n        wallet.accounts.push(Account.importAccountByPrivateKey(password, privateKey, name));\r\n        wallet.defaultAccountAddress = wallet.accounts[0].address.toBase58();\r\n        return wallet;\r\n    }\r\n\r\n    static importWalletByKeystore(password: string, keystore: object): Wallet {\r\n        const wallet = new Wallet();\r\n\t\t// @ts-ignore\r\n        wallet.defaultAccountAddress = keystore.accounts[0].address;\r\n        wallet.accounts = [];\r\n        wallet.accounts.push(Account.importAccountByKeystore(password, keystore));\r\n        // @ts-ignore\r\n        wallet.scrypt.n = keystore.scrypt.n;\r\n        return wallet;\r\n    }\r\n\r\n    static modifyPassword(oldPassword: string, newPassword: string, keystore: object): Wallet {\r\n        const wallet = new Wallet();\r\n\t\t// @ts-ignore\r\n        wallet.defaultAccountAddress = keystore.accounts[0].address;\r\n        wallet.accounts = [];\r\n        wallet.accounts.push(Account.modifyPassword(oldPassword, newPassword, keystore));\r\n        return wallet;\r\n    }\r\n\r\n    addAccount(account: Account): void {\r\n        for (const ac of this.accounts) {\r\n            if (ac.address.toBase58() === account.address.toBase58()) {\r\n                return;\r\n            }\r\n        }\r\n        this.accounts.push(account);\r\n    }\r\n\r\n    setDefaultAccount(address: string): void {\r\n        this.defaultAccountAddress = address;\r\n    }\r\n\r\n    /**\r\n     * keystore\r\n     */\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            accounts: this.accounts.map((a) => a.toJsonObj()),\r\n            defaultAccountAddress: this.defaultAccountAddress,\r\n            name: this.name,\r\n            scrypt: this.scrypt,\r\n            version: this.version\r\n        };\r\n        return obj;\r\n    }\r\n}\r\n"],"sourceRoot":""}]}