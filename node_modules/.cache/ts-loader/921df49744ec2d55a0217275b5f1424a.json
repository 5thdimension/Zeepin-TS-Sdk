{"remainingRequest":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js??ref--13-2!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\wallet\\account.ts","dependencies":[{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\wallet\\account.ts","mtime":1601302458226},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _JSON$stringify from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport { Address } from './address';\nimport { randomBytes } from \"../common/functionsUtils\";\nimport { PrivateKey } from \"../crypto/privateKey\";\nexport var Account =\n/*#__PURE__*/\nfunction () {\n  function Account() {\n    _classCallCheck(this, Account);\n\n    this['enc-alg'] = 'aes-256-gcm';\n    this.hash = 'sha256';\n    this.algorithm = 'ECDSA';\n    this.parameters = {\n      curve: 'P-256'\n    };\n  }\n  /**\r\n   * create account\r\n   */\n\n\n  _createClass(Account, [{\n    key: \"toJson\",\n    value: function toJson() {\n      return _JSON$stringify(this.toJsonObj());\n    }\n    /**\r\n     * accounts in keystore\r\n     */\n\n  }, {\n    key: \"toJsonObj\",\n    value: function toJsonObj() {\n      var obj = {\n        'address': this.address.toBase58(),\n        'algorithm': this.algorithm,\n        'enc-alg': this['enc-alg'],\n        'hash': this.hash,\n        'isDefault': this.isDefault,\n        'key': this.encryptedKey.key,\n        'label': this.label,\n        'lock': this.lock,\n        'parameters': this.parameters,\n        'publicKey': this.publicKey,\n        'salt': this.salt,\n        'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\n      };\n      return obj;\n    }\n  }, {\n    key: \"exportPrivateKey\",\n    value: function exportPrivateKey(password, n) {\n      return this.encryptedKey.decrypt(password, this.address, this.salt, n);\n    }\n  }], [{\n    key: \"createAccount\",\n    value: function createAccount(password, label) {\n      var account = new Account();\n\n      if (!label) {\n        label = randomBytes(4);\n      }\n\n      account.label = label;\n      account.isDefault = true;\n      account.lock = false;\n      var privateKey = PrivateKey.random(); //随机生成私钥\n\n      var publicKey = privateKey.getPublicKey();\n      account.publicKey = publicKey.serializeHex();\n      var address = Address.fromPubKey(publicKey);\n      account.address = address;\n      var salt = randomBytes(16);\n      account.salt = Buffer.from(salt, 'hex').toString('base64');\n      account.encryptedKey = privateKey.encrypt(password, address, salt);\n      return account;\n    }\n    /**\r\n     * Import account\r\n     */\n\n  }, {\n    key: \"importAccountByPrivateKey\",\n    value: function importAccountByPrivateKey(password, privateKey, label) {\n      var account = new Account();\n\n      if (!label) {\n        label = randomBytes(4);\n      }\n\n      account.label = label;\n      account.isDefault = true;\n      account.lock = false;\n      var privatekey = new PrivateKey(privateKey);\n      var publicKey = privatekey.getPublicKey();\n      account.publicKey = publicKey.serializeHex();\n      var address = Address.fromPubKey(publicKey);\n      account.address = address;\n      var salt = randomBytes(16);\n      account.salt = Buffer.from(salt, 'hex').toString('base64');\n      account.encryptedKey = privatekey.encrypt(password, address, salt);\n      return account;\n    }\n  }, {\n    key: \"importAccountByKeystore\",\n    value: function importAccountByKeystore(password, keystore) {\n      var account = new Account(); // @ts-ignore\n\n      var address = new Address(keystore.accounts[0].address);\n      account.address = new Address(address.serialize()); // @ts-ignore\n\n      account.label = keystore.accounts[0].label; // @ts-ignore\n\n      account.salt = keystore.accounts[0].salt;\n      account.lock = false;\n      account.isDefault = true; // @ts-ignore\n\n      account.encryptedKey = new PrivateKey(keystore.accounts[0].key); // @ts-ignore\n\n      var privateKey = account.exportPrivateKey(password, keystore.scrypt.n);\n      account.publicKey = privateKey.getPublicKey().serializeHex();\n      return account;\n    }\n    /**\r\n     * modify password\r\n     */\n\n  }, {\n    key: \"modifyPassword\",\n    value: function modifyPassword(oldPassword, newPassword, keystore) {\n      var account = new Account(); // @ts-ignore\n\n      var address = new Address(keystore.accounts[0].address);\n      account.address = new Address(address.serialize()); // @ts-ignore\n\n      account.label = keystore.accounts[0].label; // @ts-ignore\n\n      account.salt = keystore.accounts[0].salt;\n      account.lock = false;\n      account.isDefault = true; // @ts-ignore\n\n      account.encryptedKey = new PrivateKey(keystore.accounts[0].key); // @ts-ignore\n\n      var privateKey = account.exportPrivateKey(oldPassword, keystore.scrypt.n);\n      account.publicKey = privateKey.getPublicKey().serializeHex();\n      var salt = randomBytes(16);\n      account.salt = Buffer.from(salt, 'hex').toString('base64');\n      account.encryptedKey = privateKey.encrypt(newPassword, account.address, salt);\n      return account;\n    }\n  }]);\n\n  return Account;\n}();",{"version":3,"sources":["C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\wallet\\account.ts"],"names":[],"mappings":"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","sourcesContent":["import { Address } from './address'\r\nimport { randomBytes } from \"../common/functionsUtils\";\r\nimport { PrivateKey } from \"../crypto/privateKey\";\r\n\r\nexport class Account {\r\n    address: Address;\r\n    label: string;\r\n    encryptedKey: PrivateKey;\r\n    publicKey: string;\r\n    'enc-alg': string = 'aes-256-gcm';\r\n    hash: string = 'sha256';\r\n    algorithm: string = 'ECDSA';\r\n    parameters: object = {curve: 'P-256'};\r\n    salt: string;\r\n    isDefault: boolean;\r\n    lock: boolean;\r\n\r\n\r\n    /**\r\n     * create account\r\n     */\r\n    static createAccount(password: string, label?: string) {\r\n        const account = new Account();\r\n        if (!label) {\r\n            label = randomBytes(4);\r\n        }\r\n        account.label = label;\r\n        account.isDefault = true;\r\n        account.lock = false;\r\n\r\n        const privateKey = PrivateKey.random();  //随机生成私钥\r\n\r\n        const publicKey = privateKey.getPublicKey();\r\n        account.publicKey = publicKey.serializeHex();\r\n\r\n        const address = Address.fromPubKey(publicKey);\r\n        account.address = address;\r\n\r\n        const salt = randomBytes(16);\r\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\r\n\r\n        account.encryptedKey = privateKey.encrypt(password, address, salt);\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Import account\r\n     */\r\n    static importAccountByPrivateKey(password: string, privateKey: string, label?: string): Account {\r\n        const account = new Account();\r\n        if (!label) {\r\n            label = randomBytes(4);\r\n        }\r\n        account.label = label;\r\n        account.isDefault = true;\r\n        account.lock = false;\r\n\r\n        const privatekey = new PrivateKey(privateKey);\r\n        const publicKey = privatekey.getPublicKey();\r\n        account.publicKey = publicKey.serializeHex();\r\n\r\n        const address = Address.fromPubKey(publicKey);\r\n        account.address = address;\r\n\r\n        const salt = randomBytes(16);\r\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\r\n\r\n        account.encryptedKey = privatekey.encrypt(password, address, salt);\r\n\r\n        return account;\r\n    }\r\n\r\n    static importAccountByKeystore(password: string, keystore: object): Account {\r\n        const account = new Account();\r\n\t\t// @ts-ignore\r\n        const address = new Address(keystore.accounts[0].address);\r\n        account.address = new Address(address.serialize());\r\n\t\t// @ts-ignore\r\n        account.label = keystore.accounts[0].label;\r\n\t\t// @ts-ignore\r\n        account.salt = keystore.accounts[0].salt;\r\n        account.lock = false;\r\n        account.isDefault = true;\r\n\t\t// @ts-ignore\r\n        account.encryptedKey = new PrivateKey(keystore.accounts[0].key);\r\n        // @ts-ignore\r\n        const privateKey = account.exportPrivateKey(password, keystore.scrypt.n);\r\n        account.publicKey = privateKey.getPublicKey().serializeHex();\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * modify password\r\n     */\r\n    static modifyPassword(oldPassword: string, newPassword: string, keystore: object): Account {\r\n        const account = new Account();\r\n\t\t// @ts-ignore\r\n        const address = new Address(keystore.accounts[0].address);\r\n        account.address = new Address(address.serialize());\r\n\t\t// @ts-ignore\r\n        account.label = keystore.accounts[0].label;\r\n\t\t// @ts-ignore\r\n        account.salt = keystore.accounts[0].salt;\r\n        account.lock = false;\r\n        account.isDefault = true;\r\n\t\t// @ts-ignore\r\n        account.encryptedKey = new PrivateKey(keystore.accounts[0].key);\r\n        // @ts-ignore\r\n        const privateKey = account.exportPrivateKey(oldPassword, keystore.scrypt.n);\r\n        account.publicKey = privateKey.getPublicKey().serializeHex();\r\n        const salt = randomBytes(16);\r\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\r\n        account.encryptedKey = privateKey.encrypt(newPassword, account.address, salt);\r\n        return account;\r\n    }\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * accounts in keystore\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            'address': this.address.toBase58(),\r\n            'algorithm': this.algorithm,\r\n            'enc-alg': this['enc-alg'],\r\n            'hash': this.hash,\r\n            'isDefault': this.isDefault,\r\n            'key': this.encryptedKey.key,\r\n            'label': this.label,\r\n            'lock': this.lock,\r\n            'parameters': this.parameters,\r\n            'publicKey': this.publicKey,\r\n            'salt': this.salt,\r\n            'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    exportPrivateKey(password: string, n?: number) {\r\n        return this.encryptedKey.decrypt(password, this.address, this.salt, n);\r\n    }\r\n}\r\n"],"sourceRoot":""}]}