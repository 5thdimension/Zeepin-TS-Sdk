{"remainingRequest":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js??ref--13-2!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\transaction\\nativeTransaction.ts","dependencies":[{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\transaction\\nativeTransaction.ts","mtime":1601302458214},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import { BigNumber } from 'bignumber.js';\nimport { Address } from \"../wallet/address\";\nimport { PrivateKey } from \"../crypto/privateKey\";\nimport { Struct, getTokenContract, verifyAmount, buildNativeCodeScript, makeNativeContractTx } from \"./transactionUtils\";\nimport { TxSignature } from \"./txSignature\";\nimport { ERROR_CODE } from \"../common/error\";\nexport function makeTransferTx(tokenType, from, to, amount, gasPrice, gasLimit, payer) {\n  verifyAmount(amount);\n  var num = new BigNumber(amount);\n  var struct = new Struct();\n  struct.add(from, to, num);\n  var list = [];\n  list.push([struct]);\n  var contract = getTokenContract(tokenType);\n  var params = buildNativeCodeScript(list);\n  var tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\n  tx.tokenType = tokenType;\n  tx.from = from;\n  tx.to = to;\n  tx.amount = amount;\n  tx.method = 'transfer';\n\n  if (payer) {\n    tx.payer = payer;\n  } else {\n    tx.payer = from;\n  }\n\n  return tx;\n}\nexport var signTransaction = function signTransaction(tx, privateKey, schema) {\n  var signature = TxSignature.create(tx, privateKey, schema);\n  tx.sigs = [signature];\n};\nexport function nativeTransfer(tokenType, from, to, amount, gasPrice, gasLimit, fromKey, payer) {\n  if (tokenType !== 'zpt' && tokenType !== 'gala') {\n    throw ERROR_CODE.INVALID_PARAMS;\n  }\n\n  var fromAddr = new Address(from);\n  var toAddr = new Address(to);\n  var tx;\n\n  if (!payer) {\n    tx = makeTransferTx(tokenType, fromAddr, toAddr, amount, gasPrice, gasLimit);\n  } else {\n    var payerAddr = new Address(payer);\n    tx = makeTransferTx(tokenType, fromAddr, toAddr, amount, gasPrice, gasLimit, payerAddr);\n  }\n\n  var fromPK = new PrivateKey(fromKey);\n  signTransaction(tx, fromPK);\n  return tx.serialize();\n}",{"version":3,"sources":["C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\transaction\\nativeTransaction.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,cAA1B;AACA,SAAS,OAAT,QAAwB,mBAAxB;AACA,SAAS,UAAT,QAA2B,sBAA3B;AAEA,SAAS,MAAT,EAAiB,gBAAjB,EAAmC,YAAnC,EAAiD,qBAAjD,EAAwE,oBAAxE,QAAoG,oBAApG;AAEA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAQ,UAAR,QAAyB,iBAAzB;AAEA,OAAM,SAAU,cAAV,CACF,SADE,EAEF,IAFE,EAGF,EAHE,EAIF,MAJE,EAKF,QALE,EAMF,QANE,EAOF,KAPE,EAOa;AAEf,EAAA,YAAY,CAAC,MAAD,CAAZ;AACA,MAAM,GAAG,GAAG,IAAI,SAAJ,CAAc,MAAd,CAAZ;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,EAAf;AACA,EAAA,MAAM,CAAC,GAAP,CAAW,IAAX,EAAiB,EAAjB,EAAqB,GAArB;AACA,MAAM,IAAI,GAAS,EAAnB;AACA,EAAA,IAAI,CAAC,IAAL,CAAU,CAAC,MAAD,CAAV;AAEA,MAAM,QAAQ,GAAG,gBAAgB,CAAC,SAAD,CAAjC;AACA,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAD,CAApC;AACA,MAAM,EAAE,GAAa,oBAAoB,CAAC,UAAD,EAAa,MAAb,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,CAAzC;AAEA,EAAA,EAAE,CAAC,SAAH,GAAe,SAAf;AACA,EAAA,EAAE,CAAC,IAAH,GAAU,IAAV;AACA,EAAA,EAAE,CAAC,EAAH,GAAQ,EAAR;AACA,EAAA,EAAE,CAAC,MAAH,GAAY,MAAZ;AACA,EAAA,EAAE,CAAC,MAAH,GAAY,UAAZ;;AACA,MAAI,KAAJ,EAAW;AACP,IAAA,EAAE,CAAC,KAAH,GAAW,KAAX;AACH,GAFD,MAEO;AACH,IAAA,EAAE,CAAC,KAAH,GAAW,IAAX;AACH;;AACD,SAAO,EAAP;AACH;AAED,OAAO,IAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,EAAD,EAAkB,UAAlB,EAA0C,MAA1C,EAAsE;AACjG,MAAM,SAAS,GAAG,WAAW,CAAC,MAAZ,CAAmB,EAAnB,EAAuB,UAAvB,EAAmC,MAAnC,CAAlB;AACA,EAAA,EAAE,CAAC,IAAH,GAAU,CAAC,SAAD,CAAV;AACH,CAHM;AAKP,OAAM,SAAU,cAAV,CACF,SADE,EAEF,IAFE,EAGF,EAHE,EAIF,MAJE,EAKF,QALE,EAMF,QANE,EAOF,OAPE,EAQF,KARE,EAQY;AAEd,MAAG,SAAS,KAAK,KAAd,IAAuB,SAAS,KAAK,MAAxC,EAA+C;AAC3C,UAAM,UAAU,CAAC,cAAjB;AACH;;AACD,MAAM,QAAQ,GAAG,IAAI,OAAJ,CAAY,IAAZ,CAAjB;AACA,MAAM,MAAM,GAAG,IAAI,OAAJ,CAAY,EAAZ,CAAf;AACA,MAAI,EAAJ;;AACA,MAAG,CAAC,KAAJ,EAAW;AACP,IAAA,EAAE,GAAG,cAAc,CAAC,SAAD,EAAY,QAAZ,EAAsB,MAAtB,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,QAAhD,CAAnB;AACH,GAFD,MAEO;AACH,QAAM,SAAS,GAAG,IAAI,OAAJ,CAAY,KAAZ,CAAlB;AACA,IAAA,EAAE,GAAG,cAAc,CAAC,SAAD,EAAY,QAAZ,EAAsB,MAAtB,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,QAAhD,EAA0D,SAA1D,CAAnB;AACH;;AACD,MAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,OAAf,CAAf;AACA,EAAA,eAAe,CAAC,EAAD,EAAK,MAAL,CAAf;AACA,SAAO,EAAE,CAAC,SAAH,EAAP;AACH","sourcesContent":["import { BigNumber } from 'bignumber.js';\r\nimport { Address } from \"../wallet/address\";\r\nimport { PrivateKey } from \"../crypto/privateKey\";\r\nimport { SignatureScheme } from \"../crypto/cryptoParams\";\r\nimport { Struct, getTokenContract, verifyAmount, buildNativeCodeScript, makeNativeContractTx } from \"./transactionUtils\";\r\nimport { Transaction, Transfer } from \"./transaction\";\r\nimport { TxSignature } from \"./txSignature\";\r\nimport {ERROR_CODE} from \"../common/error\";\r\n\r\nexport function makeTransferTx(\r\n    tokenType: string,\r\n    from: Address,\r\n    to: Address,\r\n    amount: number | string,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transfer {\r\n    verifyAmount(amount);\r\n    const num = new BigNumber(amount);\r\n    const struct = new Struct();\r\n    struct.add(from, to, num);\r\n    const list:any[] = [];\r\n    list.push([struct]);\r\n\r\n    const contract = getTokenContract(tokenType);\r\n    const params = buildNativeCodeScript(list);\r\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\r\n\r\n    tx.tokenType = tokenType;\r\n    tx.from = from;\r\n    tx.to = to;\r\n    tx.amount = amount;\r\n    tx.method = 'transfer';\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    } else {\r\n        tx.payer = from;\r\n    }\r\n    return tx;\r\n}\r\n\r\nexport const signTransaction = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\r\n    const signature = TxSignature.create(tx, privateKey, schema);\r\n    tx.sigs = [signature];\r\n};\r\n\r\nexport function nativeTransfer(\r\n    tokenType: string,\r\n    from: string,\r\n    to: string,\r\n    amount: number | string,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    fromKey: string,\r\n    payer?: string,\r\n): string {\r\n    if(tokenType !== 'zpt' && tokenType !== 'gala'){\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const fromAddr = new Address(from);\r\n    const toAddr = new Address(to);\r\n    let tx;\r\n    if(!payer) {\r\n        tx = makeTransferTx(tokenType, fromAddr, toAddr, amount, gasPrice, gasLimit);\r\n    } else {\r\n        const payerAddr = new Address(payer);\r\n        tx = makeTransferTx(tokenType, fromAddr, toAddr, amount, gasPrice, gasLimit, payerAddr);\r\n    }\r\n    const fromPK = new PrivateKey(fromKey)\r\n    signTransaction(tx, fromPK);\r\n    return tx.serialize();\r\n}\r\n"],"sourceRoot":""}]}