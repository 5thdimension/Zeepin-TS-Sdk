{"remainingRequest":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js??ref--13-2!C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\transaction\\wasmTransaction.ts","dependencies":[{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\transaction\\wasmTransaction.ts","mtime":1601302458223},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _Promise from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport _JSON$stringify from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"C:\\\\Users\\\\Jesse\\\\Documents\\\\GitHub\\\\Zeepin-TS-Sdk\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport { Fixed64 } from \"../common/classesUtils\";\nimport { Address } from \"../wallet/address\";\nimport { TxType, Transaction } from \"./transaction\";\nimport { InvokeCode } from \"./payload\";\nimport { str2hexstr, reverseHex, num2hexstring, hexstr2str } from \"../common/functionsUtils\";\nimport { defaultPayer, defaultPrivateKey } from \"../common/consts\";\nimport RestClient from \"../network/rest/restClient\";\nimport { PrivateKey } from \"../crypto/privateKey\";\nimport { signTransaction } from \"./nativeTransaction\";\nexport var contractParams = function contractParams() {\n  _classCallCheck(this, contractParams);\n\n  this.type = 'string';\n  this.value = '';\n};\nexport var sendingParams = function sendingParams() {\n  _classCallCheck(this, sendingParams);\n\n  this.Params = new Array();\n};\nexport function makeInvokeTransaction(method, args, contractAddr, gasPrice, gasLimit, payer) {\n  var tx = new Transaction();\n  tx.type = TxType.Invoke;\n  var params = new Array();\n\n  for (var i = 0; i < args.length; i++) {\n    var _param = new contractParams();\n\n    _param.value = args[i];\n    params.push(_param);\n  }\n\n  var sendingArg = new sendingParams();\n  sendingArg.Params = params;\n\n  var argstr = _JSON$stringify(sendingArg);\n\n  var resultByte = str2hexstr('1') + reverseHex(contractAddr) + num2hexstring(method.length) + str2hexstr(method) + num2hexstring(argstr.length) + str2hexstr(argstr);\n  var payload = new InvokeCode();\n  payload.code = resultByte;\n  tx.payload = payload;\n  tx.txAttributes = 0x01;\n\n  if (gasLimit) {\n    tx.gasLimit = new Fixed64(gasLimit);\n  }\n\n  if (gasPrice) {\n    tx.gasPrice = new Fixed64(gasPrice);\n  }\n\n  if (payer) {\n    tx.payer = payer;\n  }\n\n  return tx;\n}\n;\nexport function getContractBalance(url, contractAddr, address) {\n  return new _Promise(function (resolve, reject) {\n    var payer = new Address(defaultPayer);\n    var privateKey = new PrivateKey(defaultPrivateKey);\n    var args = [];\n    args.push(address);\n    var tx = makeInvokeTransaction('balanceOf', args, contractAddr, '1', '20000', payer);\n    signTransaction(tx, privateKey);\n    var rest = new RestClient(url);\n    rest.sendRawTransaction(tx.serialize(), true).then(function (res) {\n      console.log(res);\n      var balance = hexstr2str(res.Result.Result);\n      if (balance === '') resolve('0');\n      resolve(balance);\n    });\n  });\n}\nexport function wasmTransfer(contractAddr, from, to, amount, gasPrice, gasLimit, fromKey, payer) {\n  var args = [];\n  args.push(from);\n  args.push(to);\n  args.push(amount);\n  var tx;\n\n  if (!payer) {\n    var fromAddr = new Address(from);\n    tx = makeInvokeTransaction('transfer', args, contractAddr, gasPrice, gasLimit, fromAddr);\n  } else {\n    var payerAddr = new Address(payer);\n    tx = makeInvokeTransaction('transfer', args, contractAddr, gasPrice, gasLimit, payerAddr);\n  }\n\n  var fromPK = new PrivateKey(fromKey);\n  signTransaction(tx, fromPK);\n  return tx.serialize();\n}",{"version":3,"sources":["C:\\Users\\Jesse\\Documents\\GitHub\\Zeepin-TS-Sdk\\packages\\sdk\\transaction\\wasmTransaction.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fixed64 } from \"../common/classesUtils\";\r\nimport { Address } from \"../wallet/address\";\r\nimport { TxType, Transaction } from \"./transaction\";\r\nimport { InvokeCode } from \"./payload\";\r\nimport {str2hexstr, reverseHex, num2hexstring, hexstr2str} from \"../common/functionsUtils\";\r\nimport {CONTRACTS_TEST, defaultPayer, defaultPrivateKey} from \"../common/consts\";\r\nimport RestClient from \"../network/rest/restClient\";\r\nimport {PrivateKey} from \"../crypto/privateKey\";\r\nimport {makeTransferTx, signTransaction} from \"./nativeTransaction\";\r\nimport {ERROR_CODE} from \"../common/error\";\r\n\r\nexport class contractParams{\r\n    type:string='string';\r\n    value:string='';\r\n}\r\n\r\nexport class sendingParams{\r\n    Params:Array<contractParams> = new Array<contractParams>();\r\n}\r\n\r\nexport function makeInvokeTransaction(\r\n    method: string,\r\n    args: any,\r\n    contractAddr: string,\r\n    gasPrice?: string,\r\n    gasLimit?: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const tx = new Transaction();\r\n    tx.type = TxType.Invoke;\r\n    let params : Array<contractParams> = new Array<contractParams>();\r\n\r\n    for(let i=0; i<args.length; i++){\r\n        let _param = new contractParams();\r\n        _param.value = args[i];\r\n        params.push(_param);\r\n    }\r\n\r\n    let sendingArg = new sendingParams();\r\n    sendingArg.Params = params;\r\n\r\n    let argstr = JSON.stringify(sendingArg);\r\n\r\n    let resultByte = str2hexstr('1') + reverseHex(contractAddr) + num2hexstring(method.length)\r\n        + str2hexstr(method) + num2hexstring(argstr.length) + str2hexstr(argstr);\r\n\r\n    const payload = new InvokeCode();\r\n    payload.code = resultByte;\r\n    tx.payload = payload;\r\n\r\n    tx.txAttributes = 0x01;\r\n\r\n    if (gasLimit) {\r\n        tx.gasLimit = new Fixed64(gasLimit);\r\n    }\r\n    if (gasPrice) {\r\n        tx.gasPrice = new Fixed64(gasPrice);\r\n    }\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n};\r\n\r\nexport function getContractBalance(\r\n    url: string,\r\n    contractAddr: string,\r\n    address: string\r\n): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        const payer = new Address(defaultPayer);\r\n        const privateKey = new PrivateKey(defaultPrivateKey);\r\n        let args:string[] = [];\r\n        args.push(address);\r\n        let tx = makeInvokeTransaction('balanceOf', args, contractAddr, '1', '20000', payer);\r\n        signTransaction(tx, privateKey);\r\n        const rest = new RestClient(url);\r\n        rest.sendRawTransaction(tx.serialize(), true).then((res)=> {\r\n            console.log(res);\r\n            const balance = hexstr2str(res.Result.Result);\r\n            if(balance === '')\r\n                resolve('0');\r\n            resolve(balance);\r\n        });\r\n    })\r\n}\r\n\r\nexport function wasmTransfer(\r\n    contractAddr: string,\r\n    from: string,\r\n    to: string,\r\n    amount: string,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    fromKey: string,\r\n    payer?: string,\r\n): String {\r\n    let args:string[] = [];\r\n    args.push(from);\r\n    args.push(to);\r\n    args.push(amount);\r\n    let tx;\r\n    if(!payer) {\r\n        const fromAddr = new Address(from);\r\n        tx = makeInvokeTransaction('transfer', args, contractAddr, gasPrice, gasLimit, fromAddr);\r\n    } else {\r\n        const payerAddr = new Address(payer);\r\n        tx = makeInvokeTransaction('transfer', args, contractAddr, gasPrice, gasLimit, payerAddr);\r\n    }\r\n    const fromPK = new PrivateKey(fromKey)\r\n    signTransaction(tx, fromPK);\r\n    return tx.serialize();\r\n}\r\n"],"sourceRoot":""}]}